{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "430a400b",
   "metadata": {},
   "source": [
    "Let's review MINIAOD(SIM) usage on US disk sites (T1 and T2).\n",
    "\n",
    "We need a breakdown of\n",
    "\n",
    "Campaign name | size on US disks | last accessed\n",
    "\n",
    "After that, we can choose where to put the cut and lift the rules for unused or super old campaigns.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "47a93044",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:32:23.221107Z",
     "start_time": "2022-11-30T21:32:23.216549Z"
    }
   },
   "outputs": [],
   "source": [
    "#import\n",
    "\n",
    "from datetime import datetime, timedelta\n",
    "import pandas as pd\n",
    "import pyspark.sql.functions as F\n",
    "import pyspark.sql.types as T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "9561170c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:32:23.446612Z",
     "start_time": "2022-11-30T21:32:23.443588Z"
    }
   },
   "outputs": [],
   "source": [
    "TODAY = datetime.today()\n",
    "# TODAY = TODAY - timedelta(days=1)# uncomment to use YESTERDAY as today\n",
    "TODAY = TODAY.strftime('%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "81dbd2e0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:32:23.689496Z",
     "start_time": "2022-11-30T21:32:23.686084Z"
    }
   },
   "outputs": [],
   "source": [
    "#pandas display settings\n",
    "\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "pd.set_option('display.max_rows', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "ca728d0e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:32:23.966280Z",
     "start_time": "2022-11-30T21:32:23.962713Z"
    }
   },
   "outputs": [],
   "source": [
    "#HDFS import paths\n",
    "\n",
    "HDFS_RUCIO_CONTENTS = \"/project/awg/cms/rucio/{}/contents/part*.avro\".format(TODAY)\n",
    "HDFS_RUCIO_REPLICAS = \"/project/awg/cms/rucio/{}/replicas/part*.avro\".format(TODAY)\n",
    "HDFS_RUCIO_DIDS     = \"/project/awg/cms/rucio/{}/dids/part*.avro\".format(TODAY)\n",
    "HDFS_RUCIO_LOCKS    = \"/project/awg/cms/rucio/{}/locks/part*.avro\".format(TODAY)\n",
    "HDFS_RUCIO_RSES     = \"/project/awg/cms/rucio/{}/rses/part*.avro\".format(TODAY)\n",
    "HDFS_RUCIO_RULES     = \"/project/awg/cms/rucio/{}/rules/part*.avro\".format(TODAY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b50ccf5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4678c61d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:32:24.770083Z",
     "start_time": "2022-11-30T21:32:24.692584Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "df_rses = spark.read.format('avro').load(HDFS_RUCIO_RSES)\\\n",
    "    .withColumn('rse_id', F.lower(F.hex(F.col('ID'))))\\\n",
    "    .withColumnRenamed('RSE', 'rse_name')\\\n",
    "    .withColumnRenamed('RSE_TYPE', 'rse_type')\\\n",
    "    .select(['rse_name', 'rse_id', 'rse_type'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85ca23f7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T20:55:57.899552Z",
     "start_time": "2022-11-30T20:55:51.068907Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "1c326978",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:59:58.303629Z",
     "start_time": "2022-11-30T21:59:58.276495Z"
    }
   },
   "outputs": [],
   "source": [
    "# Get the list of desired Rses - T1 and T2 Rses at US sites\n",
    "\n",
    "\n",
    "df_disk_rses = df_rses.filter(\n",
    "                            ( ~ F.col('rse_name').contains(\"_Tape\") ) & \\\n",
    "                            ( ~ F.col('rse_name').contains(\"T3_\") ) & \\\n",
    "                            ( ~ F.col('rse_name').contains(\"_Test\") ) & \\\n",
    "                            ( ~ F.col('rse_name').contains(\"_Temp\") ) & \\\n",
    "                            ( ~ F.col('rse_name').contains(\"_Ceph\") )\n",
    "                           )\n",
    "\n",
    "\n",
    "US = \"US\"\n",
    "CERN = \"T2_CH_CERN\"\n",
    "\n",
    "df_us_disk_rses = df_disk_rses.filter(F.col('rse_name').contains(CERN))\n",
    "df_non_us_disk_rses = df_disk_rses.filter(~F.col('rse_name').contains(CERN))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "3911d8ea",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:59:59.677020Z",
     "start_time": "2022-11-30T21:59:59.453756Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rse_name</th>\n",
       "      <th>rse_id</th>\n",
       "      <th>rse_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>T2_CH_CERN</td>\n",
       "      <td>542ab69d82bf401e9218bbe375bb1fce</td>\n",
       "      <td>DISK</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     rse_name                            rse_id rse_type\n",
       "0  T2_CH_CERN  542ab69d82bf401e9218bbe375bb1fce     DISK"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_disk_rses.toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "c9a615fe",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:00.253895Z",
     "start_time": "2022-11-30T21:59:59.678921Z"
    }
   },
   "outputs": [],
   "source": [
    "# MINIAOD(SIM) files with locks\n",
    "\n",
    "df_locks = spark.read.format('avro').load(HDFS_RUCIO_LOCKS) \\\n",
    "    .filter(F.col(\"STATE\") == 'O') \\\n",
    "    .withColumnRenamed(\"NAME\", \"file_name\") \\\n",
    "    .withColumn('file_size', F.col('BYTES').cast(T.LongType())) \\\n",
    "    .withColumn('rule', F.lower(F.hex(F.col('RULE_ID')))) \\\n",
    "    .withColumn('rse_id', F.lower(F.hex(F.col('RSE_ID')))) \\\n",
    "    .withColumn(\"created_date\", F.from_unixtime(F.col('created_at')/1000).cast(T.DateType())) \\\n",
    "    .withColumn(\"rule_age_days\", F.datediff(F.current_date(), F.col('created_date'))) \\\n",
    "    .select([\"file_name\", \"file_size\", \"rule\", \"rse_id\", \"created_date\", \"rule_age_days\"])\n",
    "\n",
    "\n",
    "df_locks_miniaods = df_locks.filter(F.col('file_name').contains('MINIAOD'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f209bb7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "c7387cfb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:00.257572Z",
     "start_time": "2022-11-30T22:00:00.255651Z"
    }
   },
   "outputs": [],
   "source": [
    "######################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b54b2970",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "91cd2bd8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:17.503182Z",
     "start_time": "2022-11-30T22:00:17.500946Z"
    }
   },
   "outputs": [],
   "source": [
    "#################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "aeb9509d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:17.982871Z",
     "start_time": "2022-11-30T22:00:17.980743Z"
    }
   },
   "outputs": [],
   "source": [
    "# df_locks.limit(5).toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "9f3666dd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:18.478626Z",
     "start_time": "2022-11-30T22:00:18.434262Z"
    }
   },
   "outputs": [],
   "source": [
    "df_locks_miniaod_us = df_us_disk_rses.alias(\"us_rses\")\\\n",
    "                            .join(df_locks_miniaods.alias(\"locks\"), F.col(\"us_rses.rse_id\")==F.col(\"locks.rse_id\"))\\\n",
    "                            .select([\"us_rses.rse_name\", \"us_rses.rse_id\", \"locks.file_name\", \"locks.file_size\", \"locks.rule\"])\n",
    "\n",
    "df_locks_miniaod_non_us = df_non_us_disk_rses.alias(\"non_us_rses\")\\\n",
    "                            .join(df_locks_miniaods.alias(\"locks\"), F.col(\"non_us_rses.rse_id\")==F.col(\"locks.rse_id\"))\\\n",
    "                            .select([\"non_us_rses.rse_name\", \"non_us_rses.rse_id\", \"locks.file_name\", \"locks.file_size\", \"locks.rule\"])\n",
    "\n",
    "df_locks_miniaod_all = df_rses.alias(\"all_rses\")\\\n",
    "                            .join(df_locks_miniaods.alias(\"locks\"), F.col(\"all_rses.rse_id\")==F.col(\"locks.rse_id\"))\\\n",
    "                            .select([\"all_rses.rse_name\", \"all_rses.rse_id\", \"locks.file_name\", \"locks.file_size\", \"locks.rule\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "f9bc1e30",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:24.181347Z",
     "start_time": "2022-11-30T22:00:24.179125Z"
    }
   },
   "outputs": [],
   "source": [
    "# df_locks_miniaod_non_us.limit(5).toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "fcb92e0a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:25.125799Z",
     "start_time": "2022-11-30T22:00:25.123836Z"
    }
   },
   "outputs": [],
   "source": [
    "#df_locks_miniaod_us.filter(F.col(\"file_name\").contains(\"RunIISummer20UL18MiniAODv2\")).dropDuplicates([\"file_name\"]).groupby().sum(\"file_size\").show(20, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "3af9c7a4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:26.146767Z",
     "start_time": "2022-11-30T22:00:25.849703Z"
    }
   },
   "outputs": [],
   "source": [
    "#Get file and block name maps\n",
    "\n",
    "df_file_block_map = spark.read.format('avro').load(HDFS_RUCIO_CONTENTS)\\\n",
    "                    .filter(F.col('CHILD_TYPE')=='F')\\\n",
    "                    .withColumnRenamed('NAME', 'block_name')\\\n",
    "                    .withColumnRenamed('CHILD_NAME', 'file_name')\\\n",
    "                    .select(['block_name', \"file_name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "a25d7d12",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:28.757339Z",
     "start_time": "2022-11-30T22:00:28.729797Z"
    }
   },
   "outputs": [],
   "source": [
    "df_blocks_miniaod_us = df_locks_miniaod_us.alias(\"mini_files\")\\\n",
    "                                    .join(df_file_block_map.alias(\"file_block_map\"),\n",
    "                                         F.col(\"mini_files.file_name\")==F.col(\"file_block_map.file_name\")\n",
    "                                         )\\\n",
    "                                    .withColumnRenamed('rse_name', 'us_disk_rse')\\\n",
    "                                    .select([\"us_disk_rse\", \"mini_files.rse_id\", \"mini_files.file_name\", \"mini_files.file_size\", \"mini_files.rule\", \"file_block_map.block_name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "81d71945",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:29.897531Z",
     "start_time": "2022-11-30T22:00:28.970292Z"
    }
   },
   "outputs": [],
   "source": [
    "df_block_dataset_map = spark.read.format('avro').load(HDFS_RUCIO_CONTENTS)\\\n",
    "                    .filter(F.col('CHILD_TYPE')=='D')\\\n",
    "                    .withColumnRenamed('NAME', 'dataset_name')\\\n",
    "                    .withColumnRenamed('CHILD_NAME', 'block_name')\\\n",
    "                    .select(['dataset_name', \"block_name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "77bfa233",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:32.892820Z",
     "start_time": "2022-11-30T22:00:32.840483Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "#group by campaign, tier etc\n",
    "\n",
    "df_miniaod_us_campaign = df_blocks_miniaod_us.na.fill(0)\\\n",
    "                                    .withColumn('dataset_name', F.split(F.col('block_name'), '#').getItem(0))\\\n",
    "                                    .withColumn('tier', F.split(F.col('dataset_name'), '/').getItem(3))\\\n",
    "                                    .withColumn('brute_campaign', F.split(F.col('dataset_name'), '/').getItem(2))\\\n",
    "                                    .withColumn('short_campaign', F.split(F.col('brute_campaign'), '-').getItem(0))\\\n",
    "                                    .withColumn('campaign',\n",
    "                                               F.when(F.col(\"tier\")==\"MINIAOD\", F.col(\"brute_campaign\"))\\\n",
    "                                                .otherwise(F.col(\"short_campaign\"))\n",
    "                                               )\\\n",
    "                                    .dropDuplicates([\"file_name\"])\\\n",
    "                                    .select([\"campaign\", \"file_name\", \"dataset_name\", \"file_size\"])\n",
    "#                                     .withColumn(\"accessed_at_date\", F.from_unixtime(F.col('accessed_at')/1000).cast(T.DateType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "fdfd66f3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:00:33.507502Z",
     "start_time": "2022-11-30T22:00:33.491182Z"
    }
   },
   "outputs": [],
   "source": [
    "X = 30\n",
    "top_X_campaigns = df_miniaod_us_campaign\\\n",
    "             .groupby(['campaign'])\\\n",
    "             .agg(F.sum(\"file_size\").alias(\"campaign_size\"))\\\n",
    "             .sort(F.col(\"campaign_size\").desc())\\\n",
    "             .limit(X)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "914b1947",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:20.613944Z",
     "start_time": "2022-11-30T22:00:34.561150Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------+---------------+\n",
      "|campaign                         |campaign_size  |\n",
      "+---------------------------------+---------------+\n",
      "|Run2022F-PromptReco-v1           |187518120152355|\n",
      "|Run2022E-PromptReco-v1           |63414877913859 |\n",
      "|RunIISummer20UL18MiniAODv2       |58147880302110 |\n",
      "|Phase2HLTTDRSummer20ReRECOMiniAOD|40349886547371 |\n",
      "|RunIIFall17MiniAODv2             |38544049640961 |\n",
      "|RunIISummer20UL17MiniAODv2       |38500016094514 |\n",
      "|Run2022G-PromptReco-v1           |27864580660482 |\n",
      "|RunIIAutumn18MiniAOD             |21910314129980 |\n",
      "|RunIISummer20UL18MiniAOD         |17156912633660 |\n",
      "|Run2018D-PromptReco-v2           |17036559982598 |\n",
      "|RunIISummer20UL16MiniAODv2       |17027445490245 |\n",
      "|Run2018D-22Jan2019-v2            |15398063584229 |\n",
      "|RunIISummer16MiniAODv3           |11971782735674 |\n",
      "|RunIISummer20UL16MiniAODAPVv2    |11722485029439 |\n",
      "|Run2018A-17Sep2018-v2            |8135831594497  |\n",
      "|Run2018D-12Nov2019_UL2018-v6     |7475364359194  |\n",
      "|Run2018C-17Sep2018-v1            |6194839648507  |\n",
      "|RunIISummer16MiniAODv2           |6021628437726  |\n",
      "|Run3Winter22MiniAOD              |5787455539197  |\n",
      "|RunIISummer20UL17MiniAOD         |5574394323292  |\n",
      "|Run2017D-31Mar2018-v1            |5213473543960  |\n",
      "|Run2016D-17Jul2018-v1            |4935978566723  |\n",
      "|Run2016H-17Jul2018-v1            |4851988234514  |\n",
      "|RunIIFall17MiniAOD               |4454189376143  |\n",
      "|Run2016G-17Jul2018-v1            |4194700440526  |\n",
      "|Run2017F-31Mar2018-v1            |3863328125866  |\n",
      "|Run2016F-17Jul2018-v1            |3853702973421  |\n",
      "|PhaseIISpr18AODMiniAOD           |3700265656697  |\n",
      "|Run2016C-17Jul2018-v1            |3579342837256  |\n",
      "|Run2017D-17Nov2017-v1            |3165957001813  |\n",
      "+---------------------------------+---------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "top_X_campaigns.show(X, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "0f76273a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:45.121242Z",
     "start_time": "2022-11-30T22:01:20.616061Z"
    }
   },
   "outputs": [],
   "source": [
    "#get list of campaigns to create datasets analysis for them\n",
    "#get size of each campaign\n",
    "\n",
    "temp_d = top_X_campaigns.toPandas().to_dict()\n",
    "campaign_size_dict = {}\n",
    "for i in range(X):\n",
    "    campaign_size_dict[temp_d['campaign'][i]] = temp_d['campaign_size'][i]\n",
    "    \n",
    "campaigns_list = list(campaign_size_dict.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "41e117cb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:45.158919Z",
     "start_time": "2022-11-30T22:01:45.124211Z"
    }
   },
   "outputs": [],
   "source": [
    "topX_campaign_files = top_X_campaigns.alias(\"topX\")\\\n",
    "                        .join(\n",
    "                            df_miniaod_us_campaign.alias(\"all\"),\n",
    "                            F.col(\"topX.campaign\")==F.col(\"all.campaign\")\n",
    "                        )\\\n",
    "                        .select([\"topX.campaign\", \"campaign_size\", \"file_name\", \"dataset_name\", \"file_size\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "ed9f91ad",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:45.193257Z",
     "start_time": "2022-11-30T22:01:45.162815Z"
    }
   },
   "outputs": [],
   "source": [
    "other_locked_replicas_for_topX = topX_campaign_files.alias(\"campaign_files\")\\\n",
    "                            .join(\n",
    "                                df_locks_miniaod_all.alias(\"replica\"),\n",
    "                                F.col(\"campaign_files.file_name\")==F.col(\"replica.file_name\")\n",
    "                            )\\\n",
    "                            .select([\"campaign\", \"campaign_size\", \"dataset_name\", \"replica.file_size\", \"rse_name\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "4c0880bd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:45.238389Z",
     "start_time": "2022-11-30T22:01:45.196748Z"
    }
   },
   "outputs": [],
   "source": [
    "non_us_disk_replicas_for_topX = topX_campaign_files.alias(\"campaign_files\")\\\n",
    "                            .join(\n",
    "                                df_locks_miniaod_non_us.alias(\"non_us_replica\"),\n",
    "                                F.col(\"campaign_files.file_name\")==F.col(\"non_us_replica.file_name\")\n",
    "                            )\\\n",
    "                            .select([\"campaign\", \"campaign_size\", \"dataset_name\", \"non_us_replica.file_size\", \"rse_name\", \"non_us_replica.file_name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "458ba190",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T22:01:45.352904Z",
     "start_time": "2022-11-30T22:01:45.242994Z"
    }
   },
   "outputs": [],
   "source": [
    "#Assumption - if a file from a dataset is on tape then other files of the datasets are also on tape\n",
    "#Assumptioon: Datasets are fully replicated at US disk sites\n",
    "\n",
    "\n",
    "us_dataset_file_count = topX_campaign_files\\\n",
    "                            .dropDuplicates([\"file_name\"])\\\n",
    "                            .groupby(\"dataset_name\")\\\n",
    "                            .agg(\n",
    "                                    F.count(F.col(\"file_name\")).alias(\"file_count_us\"),\n",
    "                                    F.sum(\"file_size\").alias(\"dataset_size\")\n",
    "                                )\n",
    "\n",
    "non_us_dataset_file_count = non_us_disk_replicas_for_topX\\\n",
    "                            .dropDuplicates([\"file_name\"])\\\n",
    "                            .groupby(\"dataset_name\")\\\n",
    "                            .agg(F.count(F.col(\"file_name\")).alias(\"file_count_non_us\"))\n",
    "\n",
    "percent_locked_to_non_us_rses = us_dataset_file_count.alias(\"us_count\")\\\n",
    "                                                    .join(\n",
    "                                                            non_us_dataset_file_count.alias(\"non_us_count\"),\n",
    "                                                            F.col(\"us_count.dataset_name\") == F.col(\"non_us_count.dataset_name\"),\n",
    "                                                            \"left\"\n",
    "                                                        )\\\n",
    "                                                    .select([\"us_count.dataset_name\", \"file_count_us\", \"file_count_non_us\", \"us_count.dataset_size\"])\\\n",
    "                                                    .na.fill(0)\\\n",
    "                                                    .withColumn(\"percent_locked_other_sites\", 100*(F.col(\"file_count_non_us\")/F.col(\"file_count_us\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48497694",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-29T08:31:01.709103Z",
     "start_time": "2022-11-29T08:31:01.662729Z"
    }
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f19f0b4",
   "metadata": {
    "ExecuteTime": {
     "start_time": "2022-11-30T22:01:11.042Z"
    }
   },
   "outputs": [],
   "source": [
    " #insert different dataset name here\n",
    "SITE = \"CERN\"\n",
    "\n",
    "meta_df = {\n",
    "    \"campaign\": [],\n",
    "    \"campaign_size\": [],\n",
    "    \"sum_dataset_sizes\": [],\n",
    "    \"dataset_on_tape_size\": [],\n",
    "    \"dataset_not_on_tape_size\" :[],\n",
    "    \"total_dataset_count\": [],\n",
    "    \"datasets_on_tape\": [],\n",
    "    \"datasets_not_on_tape\": [],\n",
    "    \"datasets_fully_replicated_at_other_disks\": []\n",
    "}\n",
    "\n",
    "for campaign in campaigns_list:\n",
    "    tape_replicas = other_locked_replicas_for_topX\\\n",
    "                    .filter(F.col(\"campaign\")==campaign)\\\n",
    "                    .groupby([\"dataset_name\"])\\\n",
    "                    .agg(\n",
    "                        F.sum(\"file_size\").alias(\"total_space_occupied\"),\n",
    "                        F.collect_set(F.col(\"rse_name\")).alias(\"rse_set\")\n",
    "                    )\\\n",
    "                    .withColumn(\"rses\", F.concat_ws(\",\", F.col(\"rse_set\")))\\\n",
    "                    .withColumn(\"on_tape\", F.col(\"rses\").contains(\"Tape\"))\\\n",
    "                    .select([\"dataset_name\", \"total_space_occupied\", \"rses\", \"on_tape\"])\n",
    "\n",
    "\n",
    "    tape_rep_dataset_size = tape_replicas.alias(\"tape_rep\")\\\n",
    "                        .join(\n",
    "                                percent_locked_to_non_us_rses.alias(\"dataset_size\"),\n",
    "                                F.col(\"tape_rep.dataset_name\") == F.col(\"dataset_size.dataset_name\")\n",
    "                             )\\\n",
    "                        .select([\"tape_rep.dataset_name\", \"total_space_occupied\", \"rses\", \"on_tape\", \"dataset_size\", \"percent_locked_other_sites\"])\n",
    "\n",
    "\n",
    "    pd_rep = tape_rep_dataset_size.toPandas()\n",
    "\n",
    "    meta_df['campaign'].append(campaign)\n",
    "    meta_df['campaign_size'].append(campaign_size_dict[campaign])\n",
    "    meta_df['total_dataset_count'].append(pd_rep.shape[0])\n",
    "    meta_df['datasets_on_tape'].append(pd_rep[pd_rep.on_tape == True].shape[0])\n",
    "    meta_df['datasets_not_on_tape'].append(pd_rep[pd_rep.on_tape != True].shape[0])\n",
    "    meta_df['sum_dataset_sizes'].append(pd_rep.dataset_size.sum())\n",
    "    meta_df['dataset_on_tape_size'].append(pd_rep[pd_rep.on_tape == True].dataset_size.sum())\n",
    "    meta_df['dataset_not_on_tape_size'].append(pd_rep[pd_rep.on_tape != True].dataset_size.sum())\n",
    "    meta_df['datasets_fully_replicated_at_other_disks'].append(pd_rep[pd_rep.percent_locked_other_sites == 100].shape[0])\n",
    "\n",
    "    pd_rep.to_csv(f\"Campaigns/{SITE}/{campaign}.csv\", index=False)\n",
    "\n",
    "pd_meta = pd.DataFrame.from_dict(meta_df)\n",
    "pd_meta.to_csv(\"campaign_meta.csv\")\n",
    "pd_meta.to_csv(f\"Campaigns/{SITE}/campaign_meta.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9b24d2f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:57:34.617981Z",
     "start_time": "2022-11-30T21:57:34.617971Z"
    }
   },
   "outputs": [],
   "source": [
    "#USpd_meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b530b6c9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-30T21:57:34.620071Z",
     "start_time": "2022-11-30T21:57:34.620062Z"
    }
   },
   "outputs": [],
   "source": [
    "#CERN\n",
    "pd_meta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c910e7b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-29T07:53:36.734514Z",
     "start_time": "2022-11-29T07:53:36.731764Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# df_replicas = spark.read.format('avro').load(HDFS_RUCIO_REPLICAS)\\\n",
    "#                     .withColumn('rse_id', F.lower(F.hex(F.col('RSE_ID'))))\\\n",
    "#                     .withColumnRenamed('NAME', 'file_name')\\\n",
    "#                     .alias(\"replicas\")\\\n",
    "#                     .join(\n",
    "#                         df_rses.alias(\"rse_name\"),\n",
    "#                         F.col(\"rse_name.rse_id\")==F.col(\"replicas.rse_id\")\n",
    "#                     )\\\n",
    "#                     .select(['replicas.rse_id',  'rse_name', 'file_name',])\n",
    "\n",
    "#Check the latest access for replica of miniaod(sim) in concern\n",
    "#We are ignoring last access - so skip this\n",
    "\n",
    "# df_locked_miniaods_us_with_last_access = df_locks_miniaod_us.alias(\"mini_lock\")\\\n",
    "#                                                             .join(df_replicas.alias(\"replicas\"),\n",
    "#                                                                   [F.col(\"replicas.file_name\")==F.col(\"mini_lock.file_name\"), F.col(\"replicas.rse_id\")==F.col(\"mini_lock.rse_id\")]\n",
    "#                                                                  )\\\n",
    "#                                                             .select([\"mini_lock.rse_name\", \"mini_lock.rse_id\", \"mini_lock.file_name\", \"mini_lock.file_size\", \"mini_lock.rule\", \"replicas.accessed_at\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1bce9e22",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-29T11:22:55.225019Z",
     "start_time": "2022-11-29T11:22:55.216342Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|    | campaign                       |    campaign_size |   sum_dataset_sizes |   dataset_on_tape_size |   dataset_not_on_tape_size |   total_dataset_count |   datasets_on_tape |   datasets_not_on_tape |   datasets_fully_replicated_at_other_disks |\n",
      "+====+================================+==================+=====================+========================+============================+=======================+====================+========================+============================================+\n",
      "|  0 | RunIISummer20UL18MiniAODv2     | 1937379375612216 |    1937560891983515 |       1912611004439451 |             24949887544064 |                 17892 |              17427 |                    465 |                                       8900 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  1 | RunIIAutumn18MiniAOD           | 1765960684436765 |    1765960684436765 |       1700713367632361 |             65247316804404 |                 15043 |              14836 |                    207 |                                        551 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  2 | RunIIFall17MiniAODv2           | 1755538551483870 |    1755538551483870 |       1736675543185649 |             18863008298221 |                 17171 |              17021 |                    150 |                                        465 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  3 | RunIISummer20UL17MiniAODv2     | 1542735044166950 |    1542735044166950 |       1510446869781863 |             32288174385087 |                 16635 |              16191 |                    444 |                                       8362 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  4 | RunIISummer20UL18MiniAOD       | 1101781194019679 |    1101781194019679 |       1097421874214595 |              4359319805084 |                  3367 |               3345 |                     22 |                                         13 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  5 | RunIISummer16MiniAODv3         | 1011546570832613 |    1011546570832613 |       1009711519315023 |              1835051517590 |                 25314 |              25185 |                    129 |                                        526 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  6 | RunIISummer20UL17MiniAOD       |  883905093052120 |     883905093052120 |        880306505603625 |              3598587448495 |                  3315 |               3294 |                     21 |                                         10 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  7 | RunIISummer20UL16MiniAODv2     |  808245740111161 |     808245740111161 |        789070467751277 |             19175272359884 |                 16603 |              16281 |                    322 |                                       8298 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  8 | RunIISummer20UL16MiniAODAPVv2  |  735768168076954 |     735768168076954 |        712835060564296 |             22933107512658 |                 15174 |              14989 |                    185 |                                       7917 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "|  9 | RunIISummer16MiniAODv2         |  662852568331200 |     662852568331200 |        662536330750577 |               316237580623 |                 18255 |              18115 |                    140 |                                        724 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 10 | Run2018D-05May2019promptD-v1   |  642458545376894 |     642458545376894 |        642458545376894 |                          0 |                     5 |                  5 |                      0 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 11 | Run2018D-UL2018_MiniAODv2-v1   |  597111130349395 |     597111130349395 |        587840936279755 |              9270194069640 |                    19 |                 17 |                      2 |                                          1 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 12 | RunIISummer20UL16MiniAOD       |  509919334113197 |     509919334113197 |        508758899751258 |              1160434361939 |                  3298 |               3272 |                     26 |                                         19 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 13 | RunIISummer20UL16MiniAODAPV    |  444805461807943 |     444805461807943 |        444245149367421 |               560312440522 |                  3041 |               2994 |                     47 |                                          5 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 14 | Run2022F-PromptReco-v1         |  330138059157485 |     330138059157485 |        330138059157485 |                          0 |                    68 |                 68 |                      0 |                                         68 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 15 | HIRun2018A-PbPb18_MiniAODv1-v1 |  223296483229525 |     223296483229525 |        223296483229525 |                          0 |                    28 |                 28 |                      0 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 16 | Run3Summer21MiniAOD            |  209381472128320 |     209381472128320 |        206650772690049 |              2730699438271 |                   225 |                218 |                      7 |                                          8 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 17 | Run3Winter22MiniAOD            |  146957265374897 |     146957265374897 |        138222700584553 |              8734564790344 |                   231 |                220 |                     11 |                                         18 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 18 | Run2022C-PromptReco-v1         |  141415079691940 |     141415079691940 |        110686339486307 |             30728740205633 |                    72 |                 37 |                     35 |                                          5 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 19 | Run2018D-PromptReco-v2         |  133736254090284 |     133736254090284 |        133733606044635 |                 2648045649 |                    62 |                 60 |                      2 |                                          4 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 20 | Run2018A-UL2018_MiniAODv2-v1   |  127149466336034 |     127149466336034 |        127149466336034 |                          0 |                    20 |                 20 |                      0 |                                          1 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 21 | Run2022E-PromptReco-v1         |  117031566283437 |     117031566283437 |        117031566283437 |                          0 |                    98 |                 98 |                      0 |                                         98 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 22 | Run2018B-05May2019-v2          |  109478139836015 |     109478139836015 |        109478139836015 |                          0 |                     6 |                  6 |                      0 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 23 | Run2018B-UL2018_MiniAODv2-v1   |  107025240597159 |     107025240597159 |        107009210714592 |                16029882567 |                    20 |                 19 |                      1 |                                          1 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 24 | Run2018D-15Feb2022_UL2018-v1   |  103219436930491 |     103219436930491 |         59444997732964 |             43774439197527 |                    12 |                 10 |                      2 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 25 | Run2018C-UL2018_MiniAODv2-v1   |  100140324701733 |     100140324701733 |        100140324701733 |                          0 |                    18 |                 18 |                      0 |                                          1 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 26 | Run2018C-05May2019-v1          |  100096342797526 |     100096342797526 |        100096342797526 |                          0 |                     5 |                  5 |                      0 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 27 | Run2018A-05May2019-v1          |   99627999921488 |      99627999921488 |         99627999921488 |                          0 |                     6 |                  6 |                      0 |                                          0 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 28 | Run3Winter21DRMiniAOD          |   73145663824010 |      73145663824010 |         64448763354242 |              8696900469768 |                   298 |                272 |                     26 |                                          2 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n",
      "| 29 | HINPbPbSpring21MiniAOD         |   71576492737382 |      71576492737382 |         71576492737382 |                          0 |                   158 |                158 |                      0 |                                          2 |\n",
      "+----+--------------------------------+------------------+---------------------+------------------------+----------------------------+-----------------------+--------------------+------------------------+--------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "print(pd_meta.to_markdown(tablefmt=\"grid\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bbfc3d2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "sparkconnect": {
   "bundled_options": [],
   "list_of_options": [
    {
     "name": "spark.jars.packages",
     "value": "org.apache.spark:spark-avro_2.12:3.2.1"
    },
    {
     "name": "spark.executor.memory",
     "value": "16g"
    }
   ]
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
